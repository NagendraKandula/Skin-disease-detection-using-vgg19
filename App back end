from flask import Flask, request, jsonify
from flask_cors import CORS
from tensorflow.keras.models import load_model
import numpy as np
from PIL import Image
import io
from collections import Counter

app = Flask(__name__)
CORS(app, resources={r"/predict": {"origins": "*"}})

model = load_model("Cancer_Model.h5", compile=False)
mapper = {
    0: {
        "name": "Actinic Keratosis",
        "remedy": "Seek medical advice for proper diagnosis and treatment. Topical treatments, cryotherapy, or photodynamic therapy may be recommended."
    },
    1: {
        "name": "Basal Cell Carcinoma",
        "remedy": "Treatment options include surgical excision, Mohs surgery, electrodessication and curettage, or topical medications like imiquimod."
    },
    2: {
        "name": "Dermatofibroma",
        "remedy": "Often no treatment is necessary, but if desired for cosmetic reasons, surgical excision may be performed."
    },
    3: {
        "name": "Melanoma",
        "remedy": "Consult a dermatologist for diagnosis and treatment. Surgical removal, immunotherapy, or targeted therapy may be recommended."
    },
    4: {
        "name": "Nevus",
        "remedy": "Most moles do not require treatment, but if there are changes in size, shape, or color, consult a dermatologist."
    },
    5: {
        "name": "Pigmented Benign Keratosis",
        "remedy": "Typically benign and may not require treatment, but if desired for cosmetic reasons, removal methods include cryotherapy or laser therapy."
    },
    6: {
        "name": "Seborrheic Keratosis",
        "remedy": "No treatment is usually necessary, but if desired for cosmetic reasons, removal methods include cryotherapy or laser therapy."
    },
    7: {
        "name": "Squamous Cell Carcinoma",
        "remedy": "Treatment options include surgical excision, Mohs surgery, electrodessication and curettage, or radiation therapy."
    },
    8: {
        "name": "Vascular Lesion",
        "remedy": "Treatment options vary depending on the type and severity of the lesion, including laser therapy, sclerotherapy, or surgical removal."
    }
}



@app.route("/predict", methods=["POST"])
def predict():
    if "file" not in request.files:
        return jsonify({"message": "no message part"}), 400

    file = request.files["file"]

    if file.filename == "":
        return jsonify({"message": "No selected file"}), 400

    if file:
        img = Image.open(io.BytesIO(file.read()))
        img = img.resize((224, 244))
        print(img.size)
        img_array = np.array(img)
        img_array = np.expand_dims(img_array, axis=0)
        img_array = np.transpose(img_array, (0, 2, 1, 3))

        prediction1 = model.predict(img_array)
        # prediction2 = model2.predict(img_array)
        # prediction3 = model3.predict(img_array)
        prediction_1_confidence = max(prediction1[0])
        # prediction_2_confidence = max(prediction2[0])
        # prediction_3_confidence = max(prediction3[0])
        predicted_classes_idx1 = np.argmax(prediction1[0])
        # predicted_classes_idx2 = np.argmax(prediction2[0])
        # predicted_classes_idx3 = np.argmax(prediction3[0])
        disease_name1 = mapper[int(predicted_classes_idx1)]["name"]
        disease_remedy1 = mapper[int(predicted_classes_idx1)]["remedy"]
        # disease_name2 = mapper[int(predicted_classes_idx2)]["name"]
        # disease_remedy2 = mapper[int(predicted_classes_idx2)]["remedy"]
        # disease_name3 = mapper[int(predicted_classes_idx3)]["name"]
        # disease_remedy3 = mapper[int(predicted_classes_idx3)]["remedy"]
        # predicted_classes = [
        #     int(predicted_classes_idx1),
        #     int(predicted_classes_idx2),
        #     int(predicted_classes_idx3),
        # ]
        # class_counts = Counter(predicted_classes)

        # majority_class = class_counts.most_common(1)[0][0]

        # ensembled_disease_name = mapper[majority_class]["name"]
        # ensembled_disease_remedy = mapper[majority_class]["remedy"]
        return jsonify(
            {
                "result": [
                    {
                        "model": "VGG19",
                        "predicted_class": int(predicted_classes_idx1),
                        "accuracy" : str(prediction_1_confidence),
                        "name": disease_name1,
                        "remedy": disease_remedy1,
                    },
                    # {
                    #     "model": "InceptionResNetv2",
                    #     "predicted_class": int(predicted_classes_idx2),
                    #     "accuracy" : str(prediction_2_confidence),
                    #     "name": disease_name2,
                    #     "remedy": disease_remedy2,
                    # },
                    # {
                    #     "model": "Custom Model",
                    #     "predicted_class": int(predicted_classes_idx3),
                    #     "accuracy" : str(prediction_3_confidence),
                    #     "name": disease_name3,
                    #     "remedy": disease_remedy3,
                    # },
                ]
            }
        )


if __name__ == "__main__":
    app.run(debug=True)
